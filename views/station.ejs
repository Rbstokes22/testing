<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Greenhouse Controls</title>
    <style>
        
        button {
            border: 2px solid black;
            border-radius: 5px;
        }

        body {
            color: black;
        }

        #title {
            text-align: center;
            font-size: 1.5em;
        }

        .sleekButton {
            text-align: center;
            background-color: black;
            color: white;
            border-radius: 5px;
            font-weight: 700;
        }

        #FWbut {background-color: red;} 

        /* 
        Creates as many col that will fit into container, if there is space
        will fill row with as many col as possible. Each col will have a min
        wid of 200px and a max of 1 fraction of available space, allowing
        col to grow to fill available space  
        */
        #container { 
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 10px;
        }

        .item {
            background-color: lightblue;
            padding: 20px;
            text-align: left;
            border: 2px solid black;
        }

        .smallItem {
            padding: 5px;
            border: 2px solid black;
            text-align: left;
        }

        #tempCon, #humCon, #soil1Con, #soil2Con, #soil3Con, #soil4Con,
        #lightCon {
            display: grid;
            grid-template-columns: repeat(4, minmax(75px, 1fr));
            grid-template-rows: auto;
            gap: 10px;
            align-self: start; /* prevent stretching */
        }

        .span2 {grid-column: span 2;}
        .span3 {grid-column: span 3;}
        .span4 {grid-column: span 4;}
        .selected {background-color: yellow;}
        .boundBust {background-color: red;}

    </style>
</head>
<body onload="loadPage()">
    <p id="title">Greenhouse Monitor</p>
    <div id="otaUpd"></div>
    <div id="timeCal"></div>

    <div id="container">
        <div id="tempCon" class="item"></div>
        <div id="humCon" class="item"></div>
        <div id="soil1Con" class="item"></div>
        <div id="soil2Con" class="item"></div>
        <div id="soil3Con" class="item"></div>
        <div id="soil4Con" class="item"></div>
        <div id="lightCon" class="item"></div>
        <div id="specCon" class="item">SPEC HERE</div>
        <div id="re1Con" class="item">RE1</div>
        <div id="re2Con" class="item">RE2</div>
        <div id="re3Con" class="item">RE3</div>
        <div id="re4Con" class="item">RE4</div>
    </div> <!-- contains all periph containers-->
    
    <div id="log"></div>

    <button id="logBut" class="sleekButton" onclick="openLog()">Open Log</button>

    <script>

    // Able to use build con with different selection to build any container making
    // it modular and a 1 stop shop. Temps all set and working. Ranges all good and 
    // working. Continue building the light spectrum, which will be a standalone 
    // graph with buttons to see current, averages, and prev averages. 
    // Then build relays, and finish up with a setting box that will display
    // firmware avail, system time, if it has been calibrated, report sending,
    // units F or C, and a clear averages button.

    // Network and Sockets
    const re = /(https?):\/\/([a-zA-Z0-9.-]+(:\d+)?)/; // Regex
    const URLdata = re.exec(window.location.href);
    const URLprotocol = URLdata[1]; // http or https
    const URLbody = URLdata[2]; // main url
    const OTAURL = `${URLprotocol}://${URLbody}/OTACheck`; 
    const logURL = `${URLprotocol}://${URLbody}/getLog`;
    const webSktURL = `ws://${URLbody}/ws`;

    // Elements
    const OTAdisp = document.getElementById("otaUpd");

    // Intervals (millis)
    const POLL_INTV = 1000; // Poll interval to run GET_ALL.
    const CHK_OTA_INTV = 86400000; // OTA check run.
    const CLEAR_REQ_INTV = 60000; // Clear exp skt req if non-response.
    const FW_CHECK_INTV = 12 * 60 * 60 * 1000; // Check for new firmware.

    // Flags 
    let Flags = {SKTconn:false, openLog:true};

    // Other
    const logDelim = ';';
    const RE_OFF = 255; // Signals relay is not attached.
    let isCelcius = false;
    const sensUpBg = ["yellow", "rgb(0, 224, 27)"];

    // All commands from socketHandler.hpp. These must correspond with the
    // enum. Set null as pos 0 to allow GET_ALL to be pos 1, or cmd 1.
    const CMDS = [null, "GET_ALL", "CALIBRATE_TIME", "NEW_LOG_RCVD",
        "RELAY_1", "RELAY_2", "RELAY_3", "RELAY_4",
        "RELAY_1_TIMER_ON", "RELAY_1_TIMER_OFF", 
        "RELAY_2_TIMER_ON", "RELAY_2_TIMER_OFF",
        "RELAY_3_TIMER_ON", "RELAY_3_TIMER_OFF",
        "RELAY_4_TIMER_ON", "RELAY_4_TIMER_OFF",
        "ATTACH_TEMP_RELAY", "SET_TEMP_RE_LWR_THAN", "SET_TEMP_RE_GTR_THAN",
        "SET_TEMP_RE_COND_NONE", "SET_TEMP_ALT_LWR_THAN", "SET_TEMP_ALT_GTR_THAN",
        "SET_TEMP_ALT_COND_NONE",
        "ATTACH_HUM_RELAY", "SET_HUM_RE_LWR_THAN", "SET_HUM_RE_GTR_THAN", 
        "SET_HUM_RE_COND_NONE", "SET_HUM_ALT_LWR_THAN", "SET_HUM_ALT_GTR_THAN",
        "SET_HUM_ALT_COND_NONE", "CLEAR_TEMPHUM_AVG",
        "SET_SOIL1_ALT_LWR_THAN", "SET_SOIL1_ALT_GTR_THAN", "SET_SOIL1_ALT_COND_NONE",
        "SET_SOIL2_ALT_LWR_THAN", "SET_SOIL2_ALT_GTR_THAN", "SET_SOIL2_ALT_COND_NONE",
        "SET_SOIL3_ALT_LWR_THAN", "SET_SOIL3_ALT_GTR_THAN", "SET_SOIL3_ALT_COND_NONE",
        "SET_SOIL4_ALT_LWR_THAN", "SET_SOIL4_ALT_GTR_THAN", "SET_SOIL4_ALT_COND_NONE",
        "ATTACH_LIGHT_RELAY", "SET_LIGHT_RE_LWR_THAN", "SET_LIGHT_RE_GTR_THAN",
        "SET_LIGHT_RE_COND_NONE", "SET_DARK_VALUE", "CLEAR_LIGHT_AVG",
        "SEND_REPORT_SET_TIME", "SAVE_AND_RESTART", "GET_TRENDS"];

    // Declare all vars here, to save space. idNum is used to keep track of
    // socket commands, allData contains all sensor data, and log contains
    // all log entries.
    let socket, poll, clearReqID, requestIDs = {}, idNum = 0,
        allData = {}, log = [], trends = {}, Expansions = {};

    // element build. Requires the parent ID, and both the read only and 
    // input objects. Returns constructed object.
    let eleBuild = function(parentID, readOnly, inputs) {
        this.parentID = parentID; // Used to link it to parent container.
        this.readOnly = readOnly; // Sensor and setting data.
        this.inputs = inputs; // Interactive.
        this.buttonID = `${parentID}Exp`; // Expansion button.
        return this;
    }

    // Read only build. Requires the element type, its text, and and array
    // of all classes pertaining to it. Returns constructed object.
    let RObuild = function(eleType, text, classes) {
        this.eleType = eleType; // element type. i.e. "div".
        this.text = text; // Default input text.
        this.classes = classes; // array of classes.
        return this;
    }

    // Input build. Builds the interactive portion to make adjustments to
    // system settings. Pass null if non-exist. Returns constructed object.
    let inputBuild = function(ranges, eleType, label, incBut, 
        classes, dataPtr, rangeMap, specMap, butFunc) {

        this.ranges = ranges; // All the applicable input ranges
        this.eleType = eleType; // element type. i.e. "input".
        this.label = label; // input box label.
        this.incBut = incBut; // bool. Include button.
        this.classes = classes; // array of classes.
        this.dataPtr = dataPtr; // pointer/key of allData JSON.

        // Maps. The range map is an array that has display values with an
        // index that corresponds with an actual numberical value. Special
        // maps are used for values outside of the typical range and are 
        // passed as objects.
        this.rangeMap = rangeMap; 
        this.specMap = specMap;
        this.butFunc = butFunc; // function applied to button onclick.
        return this;
    }

    // Command build. Pass the command string, and the callback function. 
    // Returns constructed object that will be called when submit is sel.
    let cmdBuild = function(cmd, callBack) {
        this.cmd = cmd;
        this.callBack = callBack;
        return this;
    }

    let rangeBuild = function(min, max, step) {
        this.min = min; // range minimum
        this.max = max; // range max
        this.step = step; // Step size
        return this;
    }

    // Checks the value and that it is within the specified range. Changes BG
    // to green and returns true upon success, and upon failure, alerts, and
    // changes the BG to red returning false.
    let QC = (val, ranges, parentID, isTemp = false) => {
        const ele = document.getElementById(parentID);

        val = isTemp ? val / 100 : val; // If temperature, div val by 100.

        if (val >= ranges.min && val <= ranges.max) {
            ele.style.backgroundColor = "rgb(0, 224, 27)";
            return true;
        } else {
            ele.style.backgroundColor = "red";
            if (!isCelcius) {
                window.alert(`${((val * 1.8) + 32).toFixed(1)} out of range ` +
                    `${((ranges.min * 1.8) + 32).toFixed(1)} to ` +
                    `${((ranges.max * 1.8) + 32).toFixed(1)}`);
            } else {
                window.alert(`${val} out of range ${ranges.min} to ` +
                `${ranges.max}`);
            }
            return false;
        }
    }

    // Build container. This is a sort of constructor that takes the name,
    // relay command, and both the relay and alert setting commands. Pass
    // null if non-exist. Can be used for the majority of containers since
    // the naming convention is cookie-cutter. Builds and returns container.
    let buildCon = (name, re, reSet, altSet, darkSet, ranges) => {
        
        // ATTENTION: Read only will consist of data reported by ESP. It
        // will show for example, temperature, relay, and alert settings.
        // Input will allow those settings to be changed by signalling srvr.

        let RO = {}, INP = {}; // Read only and Input.

        RO[name] = new RObuild("div", "0", ["smallItem", "span4"]); // Pri

        if (re) { // Relay selection. If exists, builds boxes.
            RO[`${name}Re`] = new RObuild("div", "0", ["smallItem", "span4"]);

            INP[`${name}ReAtt`] = new inputBuild(ranges.re, "input", "Plug", 
                true, ["smallItem"], `${name}Re`, ['1', '2', '3', '4', "NONE"], 
                {255: "NONE"}, () => {
                    
                const cmd = convert(re.cmd); 
                const reNum = document.getElementById(`${name}ReAttHidden`)
                    .value; // Relay number

                // Updates the diplay using ESP32 protocol.
                const disp = (reNum == 4 ) ? RE_OFF : reNum;
                const ID = getID(defResp, {[`${name}Re`]: disp}, re.callBack);

                if (QC(reNum, ranges.re, `${name}ReAtt`)) {
                    socket.send(`${cmd}/${reNum}/${ID}`);
                }
            });
        }

        if (reSet) { // Relay setting condition and value.
            INP[`${name}ReLTGT`] = new inputBuild(ranges.reCond, "input", 
                "Plug Cond", false, ["smallItem"], `${name}ReCond`, 
                ["Less Than", "Gtr Than", "NONE"], null, null);

            INP[`${name}ReSetAdj`] = new inputBuild(ranges.reSet, "input", 
                `Plug ${name}`, true, ["smallItem"], `${name}ReVal`, null, 
                null, () => {
                
                const cond = document.getElementById(`${name}ReLTGTHidden`)
                    .value; // Relay condition

                const cmd = convert(reSet.cmd) + Number(cond);
                let val = document.getElementById(`${name}ReSetAdj`).value;

                // If temperature, ensures value is in celcius, and mult
                // float val by 100 IAW ESP req.
                if (name === "temp") { 
                    val = isCelcius ? val * 100 : 
                        (((val - 32) / 1.8).toFixed(2) * 100);
                }

                const ID = getID(defResp, 
                    {[`${name}ReCond`]: cond, [`${name}ReVal`]: val}, 
                    reSet.callBack);

                if (QC(cond, ranges.reCond, `${name}ReLTGT`) &&
                    QC(val, ranges.reSet, `${name}ReSetAdj`, name === "temp")) {

                    socket.send(`${cmd}/${val}/${ID}`);  
                }
            });
        }

        if (altSet) { // Alert setting condition and value.
            RO[`${name}Alt`] = new RObuild("div", "0", ["smallItem", "span4"]);

            INP[`${name}AltLTGT`] = new inputBuild(ranges.altCond, "input", 
                "Alert Cond", false, ["smallItem"], `${name}AltCond`, 
                ["Less Than", "Gtr Than", "NONE"], null, null);

            INP[`${name}AltSetAdj`] = new inputBuild(ranges.altSet, "input", 
                `Alert ${name}`, true, ["smallItem"], `${name}AltVal`, null, 
                null, () => {

                const cond = document.getElementById(`${name}AltLTGTHidden`)
                    .value; // Alert condition.

                let val = document.getElementById(`${name}AltSetAdj`).value;
                const cmd = convert(altSet.cmd) + Number(cond);

                // If temperature, ensures value is in celcius, and mult
                // float val by 100 IAW ESP req.
                if (name === "temp") { // Adjust based on requirements
                        val = isCelcius ? val * 100 : 
                            (((val - 32) / 1.8).toFixed(2) * 100);
                }

                const ID = getID(defResp, 
                    {[`${name}AltCond`]: cond, [`${name}AltVal`]: val}, 
                    altSet.callBack);

                if (QC(cond, ranges.altCond, `${name}AltLTGT`) &&
                    QC(val, ranges.altSet, `${name}AltSetAdj`, 
                        name === "temp")) {

                    socket.send(`${cmd}/${val}/${ID}`);  
                }
            });
        }

        if (darkSet) { // Keeps track of the duration of light that exceeds val.
            RO[`${name}Dur`] = new RObuild("div", "0", ["smallItem", "span4"]);

            RO[`${name}Dark`] = new RObuild("div", "0", ["smallItem", "span4"]);

            INP[`${name}DarkSet`] = new inputBuild(ranges.darkSet, "input",
                "Dark value", true, ["smallItem"], "darkVal", null, null,
                () => {
                    const cmd = convert(darkSet.cmd);
                    const val = document.getElementById(`${name}DarkSet`).value;
                    const ID = getID(defResp, {"darkVal": val}, 
                        darkSet.callBack);

                    if (QC(val, ranges.darkSet, `${name}DarkSet`)) {
                        socket.send(`${cmd}/${val}/${ID}`);
                    }
                }
            )
        }

        // Once all selection have been built, build expan button and
        // adjustment bar.
        RO[`${name}ConExp`] = new RObuild("button", "Expand", ["span4"]);
        INP[`${name}ConAdj`] = new inputBuild(null, "div", "Adjust", 
            false, ["smallItem", "span3"], null, null, null);

        return new eleBuild(`${name}Con`, RO, INP); // Return object.
    }

    // After the container has been constructed using buildCon, it is passed 
    // here which will build the read only portion of the container.
    let buildRO = (container) => {

        // Iterates each read only key, creates and builds elements.
        Object.keys(container.readOnly).forEach(eleID => {
            const data = container.readOnly[eleID];
            const e = document.createElement(data.eleType);
            e.id = eleID;
            e.innerText = data.text
            data.classes.forEach(cls => { // add classes to list.
                if (cls == null || cls == undefined) return;
                e.classList.add(cls);
            });
            document.getElementById(container.parentID).appendChild(e);
        });
    }

    // After the container read only portion has been built, the expand button
    // will call this function, passing the container. This will build the 
    // remaining portion of the container which is the interactive input part.
    let expand = (container) => {
        const button = document.getElementById(container.buttonID);
        const inp = container.inputs;
        const ID = container.parentID;
        let idx = 0; // USed for expansion elements.

        let append = (ele) => {
            document.getElementById(ID).appendChild(ele);
            Expansions[ID][idx++] = ele.id;
        }

        if (button.innerText === "Expand") {
            Expansions[ID] = []; // Clear before use.
            let idx = 0; // Used for expansion elements.

            Object.keys(inp).forEach(ele => {
                const data = inp[ele];
                const label = buildLabel(ele, data);
                const e = buildInput(ele, data, container.parentID);
                const but = data.incBut ? buildButton(ele, data) : null;

                // Build hidden carrier input if range map attached. This 
                // allows separation of real values and display values.
                const hidden = data.rangeMap ? buildHidden(ele, data) : null;
    
                // Append all newly created elements to the parent container.
                append(label);
                append(e);
                if (hidden != null) append(hidden);
                if (but != null) append(but); // append last.
        
                data.classes.forEach(cls => { // Add classes
                    if (cls == null || cls == undefined) return; // none
                    e.classList.add(cls);
                });

                // Only set listeners if element type is input.
                if (data.eleType === "input") addListen(e, hidden, ID, data);
            });

            button.innerText = "Contract"; // acts as a toggle and display.

        } else if (button.innerText === "Contract") { // Remove expanded eles.
            Expansions[ID].forEach(id => document.getElementById(id).remove());
            button.innerText = "Expand";
        }
    }

    // When building the interactive part of the container, builds the labels
    // for each input using the parent ID, and the input object data.
    let buildLabel = (parent, data) => {
        const label = document.createElement("div");
        if (data.label === "Adjust") {
            label.style.gridColumn = "1"; // Span 1 if adj.
        } else {
            label.style.gridColumn = "1 / 3"; // Span 2 if regular inp
        }
        label.innerText = data.label; 
        label.style.alignContent = "center"; // Keep inline with input boxes.
        label.id = `${parent}Lab`;
        return label;
    }

    // Input will always be displayed. If a range map is sent, this will turn 
    // the input into display only, and a hidden input will be build and 
    // populated with a numerical value. If no map is sent, serves as both an
    // input and display.
    let buildInput = (parent, data, contID) => {

        const ele = document.createElement(data.eleType);
        ele.id = parent;

        if (!data.dataPtr) { // No pointer/key to JSON key/val.
            ele.value = 0;
            return ele;
        }

        if (data.rangeMap) { // Checks for rangeMap. If true...
            ele.readOnly = true; // Forces use of adjustment bar.

            // Checks for a special map and that the range map value does not
            // eixst. If true, sets to special map, if false, uses range map/
            if (data.specMap && !data.rangeMap[allData[data.dataPtr]]) {
                ele.value = data.specMap[allData[data.dataPtr]];
            } else {
                ele.value = data.rangeMap[allData[data.dataPtr]];
            }
        } else {
            ele.readOnly = false; // Allows use of input or adj bar.

            // ESP rules dictate that temp is passed in C multiplied by 100 for
            // float point precision. 
            if (contID === "tempCon") { 
                ele.value = isCelcius ? 
                    Number(allData[data.dataPtr] / 100).toFixed(1) :
                    Number(((allData[data.dataPtr] / 100) * 1.8) + 32).toFixed(1);
            } else {
                ele.value = allData[data.dataPtr];
            }
        }

        return ele;
    }

    // builds submit button for input items.
    let buildButton = (parent, data) => {
        const button = document.createElement("button");
        button.id = `${parent}But`;
        button.innerText = "Submit";
        button.onclick = () => data.butFunc();
        return button;
    }

    let buildHidden = (parent, data) => { // This will contain real values
        const actual = document.createElement(data.eleType);
        actual.type = "hidden";
        actual.id = `${parent}Hidden`;
        actual.value = allData[data.dataPtr]; 
        return actual;
    }

    let addListen = (disp, actual, ID, data) => {
        
        disp.addEventListener("focus", () => {
            const adj = document.getElementById(`${ID}Adj`);
            let min = data.ranges.min;
            let max = data.ranges.max;
            let step = data.ranges.step;

            if (["tempReVal", "tempAltVal"].indexOf(data.dataPtr) != -1 &&
                !isCelcius) { // Convert to F if set, before use.
                min = (min * 1.8) + 32;
                max = (max * 1.8) + 32;
                step = 1;
            }

            adj.innerHTML = `<input id="${ID}AdjBar" type="range" min="${min}" 
                max="${max}" step="${step}">`;

            const AdjBar = document.getElementById(`${ID}AdjBar`);

            AdjBar.addEventListener("input", () => {
                if (actual) (actual.value = AdjBar.value);
                
                if (data.rangeMap != null) {
                    disp.value = data.rangeMap[AdjBar.value];
                } else {
                    disp.value = AdjBar.value;
                }
            });

            AdjBar.style.width = "225px"; // 3/4 of the grid width.

            if (data.rangeMap != null) { // Set upon expansion.
                AdjBar.value = data.rangeMap.indexOf(disp.value);
            } else {
                AdjBar.value = disp.value; 
            }

            disp.classList.add("selected");
        });

        disp.addEventListener("blur", () => {
            disp.classList.remove("selected");
        });
    }

    // Returns the index of the command, this is used with esp32 ssocket
    // command as argument 1.
    const convert = (CMD) => CMDS.indexOf(CMD);

    // Requires callback function for a successful update, the key/value
    // pairs with the key being the allData JSON key, and its value to
    // update to, and the second callback function which will run after
    // the JSON has been updated, to update the display. Returns the ID.
    const getID = (callback1 = null, KVs = null, callback2 = null) => {
        const id = idNum++;
        requestIDs[id] = [callback1, KVs, callback2]; 
        return id;
    }

    // No params. Returns true if socket is open, false if not.
    const isSocketOpen = () => (Flags.SKTconn && WebSocket.OPEN);

    // SOCKETS. Event handlers.
    const initWebSocket = () => {
        console.log("Init websocket");
        socket = new WebSocket(webSktURL); // Open new socket.
        socket.onopen = socketOpen; // Set the event handler functions.
        socket.onclose = socketClose;
        socket.onmessage = socketMsg;
    }

    const socketOpen = () => { // Open socket handler
        console.log("Connected to server");
        Flags.SKTconn = true;
        poll = setInterval(pollServer, POLL_INTV); // Set intervals
        clearReqID = setInterval(clearOldRequests, 10000);
    }

    const socketClose = () => { // Close socket handler
        console.log("Disconnected from server");
        Flags.SKTconn = false;
        clearInterval(poll); // Clear intervals.
        clearInterval(clearReqID);
        setTimeout(initWebSocket, 2000); // Attempt reconnect.
    }

    // Messages from server will be in JSON format, parsed, and sent to the
    // assigned function to handle that response.
    const socketMsg = (event) => handleResponse(JSON.parse(event.data)); 

    // Receives the parsed JSON response from the socket message. Gets its
    // function from the ID, runs the function passing the response, and
    // deletes the ID signifying the request is complete.
    const handleResponse = (response) => {
        const func = requestIDs[response.id][0]; // callback function
    
        // Check if default response. If so, will send the html element
        // ID and the value to set it to iff successful. This will handle
        // most socket responses.
        if (func === defResp && response.status === 1) { // 1 = success
            func(requestIDs[response.id][1], requestIDs[response.id][2]);
        } else if (func != null) { 
            func(response); // Used moreso for trends and get all.
        }

        delete requestIDs[response.id]; // Delete corresponding ID.
    }

    // Polls the server at a set interval requesting all data.
    const pollServer = () => {
        if (isSocketOpen()) {
            socket.send(`${convert("GET_ALL")}/${0x00}/${getID(getAll)}`);
        }
    }

    // Clears requests that will not be satisfied by the server to 
    // prevent the from accumulating to non responses.
    const clearOldRequests = () => {
        Object.keys(requestIDs).forEach(id => {
            if (Number(id) < (idNum - 3)) delete requestIDs[id];
        });
    }

    // Gets the log, separates it into a non-delimited array, to be used
    // for diplay.
    let getLog = () => { // HTTP call
        const button = document.getElementById("logBut");
        fetch(logURL)
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error status: ${response.status}`);
            }
            return response.text(); // If no err, proceed.
        })
        .then(text => {
            if (text.length <= 0) throw new Error("No Log Data");
            log = text.split(logDelim); // Split by delim into array.
            button.style.backgroundColor = "green"; // Shows new log

            // Is a receipt only, Allows server to remove flag.
            if (!isSocketOpen()) return; // Block
            socket.send(`${convert("NEW_LOG_RCVD")}/${0x00}/${getID()}`); 
        })
        .catch(err => console.log(err));
    }

    const openLog = () => { // Opens the log for display.
        const button = document.getElementById("logBut");
        const logDisp = document.getElementById("log");

        if (Flags.openLog) {
            let html = "";
            log.forEach(entry => html += `${entry}<br>`);
            logDisp.innerHTML = html;
            button.innerText = "Close log";
            Flags.openLog = false;

        } else if (!Flags.openLog) {
            logDisp.innerText = ""; // Clear out.
            button.style.backgroundColor = "black";
            button.innerText = "Open log";
            Flags.openLog = true;
        }
    }

    // Qty 1 - 12. Default to 6. Gets the previous n hours of temp/hum or
    // light trends.
    let getTrends = (qty = 6) => {
        if (!isSocketOpen()) return; // Block
        socket.send(`${convert("GET_TRENDS")}/${0x00}/${getID(setTrends)}`); 
    }

    // Pass the current time in seconds from the ESP. If different than
    // real time, sends socket cmd to calibrate to real time.
    let calibrateTime = (seconds) => { // calibrates time if different
        const time = new Date();
        const padding = 2; // This prevents constant cal w/ rounding err.
        let secPastMid = (time.getHours() * 3600) + (time.getMinutes() * 60) 
            + time.getSeconds();

        // Compute time delta between machine and client.
        const delta = ((seconds - secPastMid)**2)**(1/2);

        // calibrate clock if esp time out of range. Ignore midnight switch.
        if (delta >= padding && secPastMid != 0) { 
            if (!isSocketOpen()) return; // Block
            socket.send(`${convert("CALIBRATE_TIME")}/
            ${secPastMid}/${getID(defResp)}`);
        }
    }

    let handleTempHum = () => { // Handles temperature and humidity container.
        
        // Checks the bounds, and if the temp/hum is out of bounds, adds class.
        let checkBounds = (data, eleReID, eleAltID) => {

            // Check that relay is in play and its has a value.
            if (data[3] != RE_OFF) { 
                // If true, check that the relay has a setting other than NONE.
                if (((data[4] == 0) && (data[0] < data[5])) ||
                    ((data[4] == 1) && (data[0] > data[5]))) {

                    eleReID.classList.add("boundBust");
                } else {
                    eleReID.classList.remove("boundBust");
                }

            } else {
                eleReID.classList.remove("boundBust");
            }

            // Next check that the alert has a setting other than NONE.
            if (((data[6] == 0) && (data[0] < data[7])) ||
                ((data[6] == 1) && (data[0] > data[7]))) {

                    eleAltID.classList.add("boundBust");
                } else {
                    eleAltID.classList.remove("boundBust");
                }
        }

        // Processes data from the allData object, to display the current
        // settings and values in the RO portion of the tempcon.
        let proc = (cont, data, name) => {
            
            const parent = document.getElementById(cont.parentID);
            const IDs = Object.keys(cont.readOnly);
            const val = document.getElementById(IDs[0]);
            const re = document.getElementById(IDs[1]);
            const alt = document.getElementById(IDs[2]);
            const U = isCelcius ? ' C' : ' F';

            // Append units onto name.
            name = (name === "Temp") ? name += U : name += ' %';

            // Set the text for the RO portions of the tempcon.
            val.innerText = `${name}: ${data[0].toFixed(1)} |` +
                ` Avg: ${data[1].toFixed(1)} |` +
                ` Prev Avg: ${data[2].toFixed(1)}`;

            re.innerText = `Plug: ${relayNum(data[3])} set to` +
                ` ${reAltCond(data[4], data[5])}`;
            
            alt.innerText = `Alert set to ${reAltCond(data[6], data[7])}`;

            parent.style.backgroundColor = sensUpBg[allData["SHTUp"]];
            // Check bounds once processed to ensure correct coloring.
            checkBounds(data, re, alt);
        }

        // changes the temperature to the correct float value.
        let manipTemp = (data) => { // Do not affect standing values.
            data[5] /= 100; // reduce int to float
            data[7] /= 100; // reduce int to float
            const prohibIdx = [3, 4, 6]; // Ignore these indicies in loop.

            if (!isCelcius) {

                data.forEach((item, idx) => {
                    if (prohibIdx.indexOf(idx) != -1) return; // match
                    data[idx] = ((item * 1.8) + 32); // Conv to F.   
                });
            }
        }

        // array with all the temperature data to process.
        let data = [allData.temp, allData.tempAvg, allData.tempAvgPrev,
            allData.tempRe, allData.tempReCond, allData.tempReVal,
            allData.tempAltCond, allData.tempAltVal];

        manipTemp(data);
        proc(tempCon, data, "Temp");

        // update array with the humidity data to process.
        data = [allData.hum, allData.humAvg, allData.humAvgPrev,
            allData.humRe, allData.humReCond, allData.humReVal,
            allData.humAltCond, allData.humAltVal];

        proc(humCon, data, "Hum"); 
    }

    let handleSoil = () => { // Handles all soil containers.
        const cont = [soil1Con, soil2Con, soil3Con, soil4Con]; // estab cont.

        // Changes RO display color if value exceeds bounds.
        let checkBounds = (data, eleAltID) => {
            if (((data[1] == 0) && (data[0] < data[2])) ||
                ((data[1] == 1) && (data[0] > data[2]))) {

                eleAltID.classList.add("boundBust");
            } else {
                eleAltID.classList.remove("boundBust");
            }
        }

        // processes data from the allData object, to diplay the current setting
        // and values in the RO portion of each soilCon.
        let proc = (cont, data, name) => {
            const parent = document.getElementById(cont.parentID);
            const IDs = Object.keys(cont.readOnly);
            const val = document.getElementById(IDs[0]);
            const alt = document.getElementById(IDs[1]);

            val.innerText = `${name}: ${data[0]}`;
            alt.innerText = `Alert set to ${reAltCond(data[1], data[2])}`;

            parent.style.backgroundColor = sensUpBg[allData[`${name}Up`]];
            checkBounds(data, alt);
        }

        cont.forEach((sensor, idx) => {
            let tIdx = idx + 1; // Temp index, used only for display soil.
            
            let data = [allData[`soil${tIdx}`], 
                allData[`soil${tIdx}AltCond`], allData[`soil${tIdx}AltVal`]];
            proc(sensor, data, `soil${tIdx}`);
        });
    }

    let handleLight = () => {
        
        const getDur = (seconds) => {
            const h = Math.floor(seconds / 3600);
            const m = Math.floor((seconds % 3600) / 60);
            const s = seconds % 60;
            return `${h}:${m}:${s}`;
        }


        let checkBounds = () => {

        } 

        let proc = (cont, data, name) => {
            const parent = document.getElementById(cont.parentID);
            const IDs = Object.keys(cont.readOnly);
            const val = document.getElementById(IDs[0]);
            const re = document.getElementById(IDs[1]);
            const dur = document.getElementById(IDs[2]);
            const dark = document.getElementById(IDs[3])
           
            val.innerText = `${name}: ${data[0]} | Avg: ${data[1].toFixed(1)}` +
                ` | Prev Avg: ${data[2].toFixed(1)}`;

            re.innerText = `Plug: ${relayNum(data[3])} set to` +
                ` ${reAltCond(data[4], data[5])}`;

            dur.innerText = `Light duration: ${getDur(data[6])}`;
            dark.innerText = `Dark val set to ${data[7]}`;

            parent.style.backgroundColor = sensUpBg[allData.photoUp];
        }

        const data = [allData.photo, allData.photoAvg, allData.photoAvgPrev,
            allData.lightRe, allData.lightReCond, allData.lightReVal,
            allData.lightDur, allData.darkVal];

        proc(lightCon, data, "Light");
    }

    // RECEIVED MESSAGE HANDLERS

    // Once all data is req in polling, calls this with reply.
    let getAll = (data) => { // Sets the addData object to response
        allData = data; // Allows use between poll interval waits
        
        const title = document.getElementById("title");
        title.innerHTML = `Greenhouse Monitor V${data.firmv}`;

        calibrateTime(data.sysTime); // Ensures sys clock is calib to client
        handleTempHum();
        handleSoil();
        handleLight();

        if (data.newLog === 1) getLog(); // Gets log if avail
    }

    // Requires the html element ID, and value to update it to. Only runs
    // upon a successful esp-32 change indicated in socket reply. Changes
    // innerHTML in the event the value is HTML.
    let defResp = (KVs = null, CBfunc = null) => { // Default response.
        if (KVs) {
            Object.keys(KVs).forEach(key => {
                allData[key] = KVs[key];
            });
        }

        if (CBfunc) CBfunc();
    };

    // Set the trends when received back from socker server.
    let setTrends = (data) => (trends = data); // Copies data to trends.


    let relayNum = (val) => val === RE_OFF ? "NONE" : Number(val) + 1;
    let reAltCond = (cond, val) => {
        const textConv = ["<", ">", "NONE"];
        if (cond == 2) return textConv[cond];
        return `${textConv[cond]} ${val.toFixed(1)}`;
    }

    // Pings the server to see if new firmware is available. If the server 
    // has a fw version different than the device, it will reply with the
    // new version, which will allow a clickable update.
    const checkNewFW = () => {
        return new Promise((resolve, reject) => {
        fetch(OTAURL)
        .then(res => res.json())
        .then(res => {
            const {version} = res;
            const noActionResp = ["Invalid JSON", "match", "wap", 
                "Connection open fail", "Connection init fail"];
                

            // If -1, means that there is an actual value, so the update
            // should be available in button form.
            if (noActionResp.indexOf(version) == -1) {
                const html = `<button id="FWbut" class="sleekButton" 
                    onclick="DLfirmware('${res.signatureURL}', 
                    '${res.firmwareURL}')"> Update to Version ${version}
                    </button>`;

                OTAdisp.innerHTML = html;
                resolve(200);
            }
        })
        .catch(err => reject(err));
    });
    }

    // Triggered by the DL firmware button. Downloads the OTA update,
    // and if successful, restarts the webpage. This will clear the button
    // since the versions will be matched.
    const DLfirmware = (sigURL, firURL) => {
        const URL = `${URLprotocol}://${URLbody}/OTAUpdate?url=${firURL}
            &sigurl=${sigURL}`;

        let updHTML = OTAdisp.innerHTML;

        fetch(URL)
        .then(res => res.json())
        .then(res => {
            const {status} = res;
            if (status === "OK") { // Exp response from the server.
                let secToReload = 10;
                let intervalID = setInterval(() => { // Countdown to reload
                    OTAdisp.innerText = `Restarting in ${secToReload--}`;
                    if (secToReload < 1) {
                        clearInterval(intervalID);
                        window.location.reload();
                    }
                }, 1000);
            } else {
                updHTML += " (Failed)";
                OTAdisp.innerHTML = updHTML;
            }
        })
        .catch(err => {
            updHTML += ` (Error)`;
            OTAdisp.innerHTML = updHTML;
        });
    }

    // When called, sets a timeout for 15 sec to check for OTA updates,
    // and start interval to update after n amount of time.
    let checkUpdates = () => {

        let runCheck = (curTime) => { // Runs 
            checkNewFW()
            .then(resp => {
                localStorage.setItem("OTA", curTime);
            })
            .catch(err => console.log(err));
        }

        setTimeout(() => runCheck(Date.now()), 15000); // Chk after 15 sec

        setInterval(() => {
            const lastCheck = Number(localStorage.getItem("OTA"));
            const curTime = Date.now();

            if (lastCheck === null) { // Has not been saved yet, first init.
                runCheck(curTime);
            } else {
                const expireTime = lastCheck + CHK_OTA_INTV;
                if (curTime >= expireTime) runCheck(curTime);
            }

        }, FW_CHECK_INTV);
    }

    const tempCon = buildCon("temp", 
        new cmdBuild("ATTACH_TEMP_RELAY", handleTempHum),
        new cmdBuild("SET_TEMP_RE_LWR_THAN", handleTempHum),
        new cmdBuild("SET_TEMP_ALT_LWR_THAN", handleTempHum), null,
        {
            "re": new rangeBuild(0, 4, 1), "reCond": new rangeBuild(0, 2, 1),
            "reSet": new rangeBuild(-30, 60, 0.5), // Celcius
            "altCond": new rangeBuild(0, 2, 1),
            "altSet": new rangeBuild(-30, 60, 0.5) // Celcius
        }
    );

    const humCon = buildCon("hum", 
        new cmdBuild("ATTACH_HUM_RELAY", handleTempHum),
        new cmdBuild("SET_HUM_RE_LWR_THAN", handleTempHum),
        new cmdBuild("SET_HUM_ALT_LWR_THAN", handleTempHum), null,
        {
            "re": new rangeBuild(0, 4, 1), "reCond": new rangeBuild(0, 2, 1),
            "reSet": new rangeBuild(1, 99, 1), 
            "altCond": new rangeBuild(0, 2, 1),
            "altSet": new rangeBuild(1, 99, 1)
        }
    );

    const soil1Con = buildCon("soil1", null, null, 
        new cmdBuild("SET_SOIL1_ALT_LWR_THAN", handleSoil), null,
        {
            "altCond": new rangeBuild(0, 2, 1),
            "altSet": new rangeBuild(1, 4094, 10)
        }
    );

    const soil2Con = buildCon("soil2", null, null, 
        new cmdBuild("SET_SOIL2_ALT_LWR_THAN", handleSoil), null,
        {
            "altCond": new rangeBuild(0, 2, 1),
            "altSet": new rangeBuild(1, 4094, 10)
        }
    );

    const soil3Con = buildCon("soil3", null, null, 
        new cmdBuild("SET_SOIL3_ALT_LWR_THAN", handleSoil), null,
        {
            "altCond": new rangeBuild(0, 2, 1),
            "altSet": new rangeBuild(1, 4094, 10)
        }
    );

    const soil4Con = buildCon("soil4", null, null, 
        new cmdBuild("SET_SOIL4_ALT_LWR_THAN", handleSoil), null,
        {
            "altCond": new rangeBuild(0, 2, 1),
            "altSet": new rangeBuild(1, 4094, 10)
        }
    );

    const lightCon = buildCon("light", 
        new cmdBuild("ATTACH_LIGHT_RELAY", handleLight),
        new cmdBuild("SET_LIGHT_RE_LWR_THAN", handleLight), null, 
        new cmdBuild("SET_DARK_VALUE", handleLight),
        {
            "re": new rangeBuild(0, 4, 1), "reCond": new rangeBuild(0, 2, 1),
            "reSet": new rangeBuild(1, 4094, 10), 
            "darkSet": new rangeBuild(1, 4094, 10), 
        }
    );

    const buildContainers = () => {
        buildRO(tempCon);
        buildRO(humCon);
        buildRO(soil1Con);
        buildRO(soil2Con);
        buildRO(soil3Con);
        buildRO(soil4Con);
        buildRO(lightCon);
    }

    const addListeners = () => {
    document.getElementById(tempCon.buttonID).onclick = () => expand(tempCon);
    document.getElementById(humCon.buttonID).onclick = () => expand(humCon);
    document.getElementById(soil1Con.buttonID).onclick = () => expand(soil1Con);
    document.getElementById(soil2Con.buttonID).onclick = () => expand(soil2Con);
    document.getElementById(soil3Con.buttonID).onclick = () => expand(soil3Con);
    document.getElementById(soil4Con.buttonID).onclick = () => expand(soil4Con);
    document.getElementById(lightCon.buttonID).onclick = () => expand(lightCon);
    }

    let loadPage = () => {
        buildContainers();
        addListeners();
        initWebSocket(); // Inits the websocket protocol.
        getLog(); // Gets the log when loading the page.
        getTrends(6); // Gets the previous 6 hours of trend data.
        checkUpdates(); // Starts firmware checking timeout and interval.
    }

    </script>
    
</body>
</html>